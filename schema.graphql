type PlatformEntity @entity {
  id: Bytes! #address platform
  factory: Bytes # address
  vaultManager: Bytes # address
  strategyLogic: Bytes # address
  buildingPermitToken: Bytes # address
  buildingPayPerVaultToken: Bytes # address
  governance: Bytes # address
  multisig: Bytes # address
  zap: Bytes # address
  bridge: Bytes # address
  swapper: Bytes # address
  dexAggreagators: [Bytes!] # address[]
  bcAssets: [Bytes!] # address[]
  version: String
}

type VaultEntity @entity {
  id: Bytes! #address
  apr: BigInt!
  tvl: BigInt!
  sharePrice: BigInt!
  vaultType: String!
  strategyId: String!
  totalSupply: BigInt!
  strategy: Bytes! #address
  strategyDescription: String!
  assetsProportions: [BigInt!]
  deployAllowed: Boolean!
  upgradeAllowed: Boolean!
  color: Bytes!
  colorBackground: Bytes!
  vaultBuildingPrice: BigInt!
  version: String!
  name: String!
  symbol: String!
  underlying: Bytes!
  strategySpecific: String!
  strategyAssets: [Bytes!]! #addresses
  assetsWithApr: [Bytes!]! #addresses
  assetsAprs: [BigInt!]!
  lastHardWork: BigInt!
  vaultStatus: BigInt!
  hardWorkOnDeposit: Boolean!
  created: BigInt!
  userVault: [UserVaultEntity!]
  vaultUsersList: [String!]!
  gasReserve: BigInt
  NFTtokenID: BigInt!
  AssetsPricesOnCreation: [BigInt!]!
  lifeTimeAPR: BigInt!
  vaultHistoryEntity: [VaultHistoryEntity!]
  almRebalanceHistoryEntity: [ALMRebalanceHistoryEntity!]
  initAssetsAmounts: [BigInt!]
  lastAssetsPrices: [String!]!
  lastAssetsSum: String!
}

type VaultTypeEntity @entity {
  id: String! #VaultType
  deployAllowed: Boolean!
  upgradeAllowed: Boolean!
  color: Bytes!
  colorBackground: Bytes!
  vaultBuildingPrice: BigInt!
  version: String!
}

type StrategyEntity @entity {
  id: Bytes! #address
  strategyId: String!
  tokenId: BigInt!
  #shortName: String! #??
  color: Bytes!
  colorBackground: Bytes!
  version: String!
  pool: Bytes #address
  underlyingSymbol: String
}

type StrategyConfigEntity @entity {
  id: String! #string ID
  version: String!
}

type AssetHistoryEntity @entity(immutable: true) {
  id: Bytes!
  address: Bytes! #address
  price: BigInt!
  timestamp: BigInt!
}

type VaultHistoryEntity @entity(immutable: true) {
  id: String!
  address: Bytes! #address
  sharePrice: BigInt!
  TVL: BigInt
  APR: BigInt
  APR_Compound: BigInt
  APR24H: BigInt
  APRWeekly: BigInt
  timestamp: BigInt!
  daysFromCreation: String
  periodVsHoldAPR: String
  periodTokensVsHoldAPR: [String!]
  lifetimeVsHoldAPR: String
  lifetimeTokensVsHoldAPR: [String!]
}

type VaultAPRsEntity @entity {
  id: Bytes! #address
  APRS: [BigInt!]!
  timestamps: [BigInt!]!
}

type ALMRebalanceHistoryEntity @entity(immutable: true) {
  id: Bytes!
  alm: Bytes! #address
  protocol: String!
  timestamp: BigInt!
  totalAssets0: BigInt!
  totalAssets1: BigInt!
  totalUSD: BigInt!
  fee0: BigInt!
  fee1: BigInt!
  feeUSD: BigInt!
  isRebalance: Boolean!
  APRFromLastEvent: BigInt!
  APR24H: BigInt
  APRWeekly: BigInt
}

type LastFeeAMLEntity @entity {
  id: Bytes! #address underlying
  vault: Bytes! #address
  fee: BigInt
  managerFee: BigInt
  factoryFee: BigInt
  total_fee: BigInt
  APRS: [BigInt!]!
  timestamps: [BigInt!]!
}

#Supporting
type DefiEdgePoolsAndStrategiesEntity @entity {
  id: Bytes! #address factory
  pools: [Bytes!]!
  strategies: [Bytes!]!
}

type UserHistoryEntity @entity(immutable: true) {
  id: Bytes!
  userAddress: Bytes! #address
  deposited: BigInt
  rewardsEarned: BigInt
  timestamp: BigInt!
}

type UserAllDataEntity @entity {
  id: Bytes! #address
  vaults: [Bytes!]!
  deposited: BigInt!
  rewardsEarned: BigInt!
}

type UserVaultEntity @entity {
  id: String! #Vault:User address
  deposited: BigInt!
  rewardsEarned: BigInt!
}

type DefiEdgeILEntity @entity(immutable: true) {
  id: Bytes!
  deposited: BigInt!
  rewardsEarned: BigInt!
}
