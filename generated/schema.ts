// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class VaultsListEntity extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VaultsListEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type VaultsListEntity must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VaultsListEntity", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): VaultsListEntity | null {
    return changetype<VaultsListEntity | null>(
      store.get_in_block("VaultsListEntity", id.toHexString())
    );
  }

  static load(id: Bytes): VaultsListEntity | null {
    return changetype<VaultsListEntity | null>(
      store.get("VaultsListEntity", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get deployer(): Bytes {
    let value = this.get("deployer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set deployer(value: Bytes) {
    this.set("deployer", Value.fromBytes(value));
  }

  get vaultType(): string {
    let value = this.get("vaultType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set vaultType(value: string) {
    this.set("vaultType", Value.fromString(value));
  }

  get strategyId(): string {
    let value = this.get("strategyId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set strategyId(value: string) {
    this.set("strategyId", Value.fromString(value));
  }

  get vault(): Bytes {
    let value = this.get("vault");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set vault(value: Bytes) {
    this.set("vault", Value.fromBytes(value));
  }

  get strategy(): Bytes {
    let value = this.get("strategy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set strategy(value: Bytes) {
    this.set("strategy", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get assets(): Array<Bytes> | null {
    let value = this.get("assets");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set assets(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("assets");
    } else {
      this.set("assets", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get deploymentKey(): Bytes {
    let value = this.get("deploymentKey");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set deploymentKey(value: Bytes) {
    this.set("deploymentKey", Value.fromBytes(value));
  }

  get vaultManagerTokenId(): BigInt {
    let value = this.get("vaultManagerTokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set vaultManagerTokenId(value: BigInt) {
    this.set("vaultManagerTokenId", Value.fromBigInt(value));
  }
}

export class InitializeEntity extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save InitializeEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type InitializeEntity must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("InitializeEntity", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): InitializeEntity | null {
    return changetype<InitializeEntity | null>(
      store.get_in_block("InitializeEntity", id.toHexString())
    );
  }

  static load(id: Bytes): InitializeEntity | null {
    return changetype<InitializeEntity | null>(
      store.get("InitializeEntity", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get platform(): Bytes {
    let value = this.get("platform");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set platform(value: Bytes) {
    this.set("platform", Value.fromBytes(value));
  }

  get ts(): BigInt {
    let value = this.get("ts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ts(value: BigInt) {
    this.set("ts", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}
